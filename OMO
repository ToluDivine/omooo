ARRAY
#include<stdio.h>
#include<conio.h>
#define MAX 10
void create();
void insert();
void deletion();
void search();
void display();
int a, b[20], n, p, e, f, i, pos;
void main()
{
//clrscr();
int ch;
char g='y';
do
{
printf("\n main Menu");
printf("\n 1.Create \n 2.Delete \n 3.Search \n 4.Insert \n 5.Display\n 6.Exit \n");
printf("\n Enter your Choice");
scanf("%d", &ch);
switch(ch)
{
case 1:
create();
break;
case 2:
deletion();
break;
case 3:
search();
break;
case 4:
insert();
break;
case 5:
display();
break;
case 6:
exit();
break;
default:
printf("\n Enter the correct choice:");
}
printf("\n Do u want to continue:::");
scanf("\n%c", &g);
}
while(g=='y'||g=='Y');
getch();
}
void create()
{
printf("\n Enter the number of nodes");
scanf("%d", &n);
for(i=0;i<n;i++)
{
printf("\n Enter the Element:",i+1);
scanf("%d", &b[i]);
}
}
void deletion()
{
printf("\n Enter the position you want to delete::");
scanf("%d", &pos);
if(pos>=n)
{
printf("\n Invalid Location::");
}
else
{
for(i=pos+1;i<n;i++)
{
b[i-1]=b[i];
}
n--;
}
printf("\n The Elements after deletion");
for(i=0;i<n;i++)
{
printf("\t%d", b[i]);
}
}
void search()
{
printf("\n Enter the Element to be searched:");
scanf("%d", &e);
for(i=0;i<n;i++)
{
if(b[i]==e)
{
printf("Value is in the %d Position", i);
}
else
{
printf("Value %d is not in the list::", e);
continue;
}
}
}
void insert()
{
printf("\n Enter the position u need to insert::");
scanf("%d", &pos);
if(pos>=n)
{
printf("\n invalid Location::");
}
else
{
for(i=MAX-1;i>=pos-1;i--)
{
b[i+1]=b[i];
}
printf("\n Enter the element to insert::\n");
scanf("%d",&p);
b[pos]=p;
n++;
}
printf("\n The list after insertion::\n");
display();
}
void display()
{
printf("\n The Elements of The list ADT are:");
for(i=0;i<n;i++)
{
printf("\n\n%d", b[i]);
}
}

NODE
struct node {
 int val;
 struct node * next;
};
Or using typedef:
#include <stdio.h>
int main() {
 typedef struct node {
 int val;
 struct node * next;
 } node_t;
 
return 0;
}

LOCAL VARIABLE
#include <stdio.h>
int main() {
 node_t * head = NULL;
 head = malloc(sizeof(node_t));
 if (head == NULL) {
 return 1;
 }
 
 head->val = 1;
 head->next = NULL;
 
return 0

ADD VARIABLE END LIST
#include <stdio.h>
int main() {
 node_t * head = NULL;
 head = malloc(sizeof(node_t));
 head->val = 1;
 head->next = malloc(sizeof(node_t));
 head->next->val = 2;
 head->next->next = NULL;
 
return 0;
}

ITERATING OVER LIST
#include <stdio.h>
int main() {
 void print_list(node_t * head) {
 node_t * current = head;
 
 while (current != NULL) {
 printf("%d\n", current->val);
 current = current->next;
 }
 }
return 0;

ADDING END OF LIST
#include <stdio.h>
int main() {
 void push(node_t * head, int val) {
 node_t * current = head;
 while (current->next != NULL) {
 current = current->next;
 }
 
 /* now we can add a new variable */
 current->next = malloc(sizeof(node_t));
 current->next->val = val;
 current->next->next = NULL;
 }
 
return 0;
}

ADDING TO BEGINNING
#include <stdio.h>
int main() {
 void push(node_t ** head, int val) {
 node_t * new_node;
 new_node = malloc(sizeof(node_t));
 
 new_node->val = val;
 new_node->next = *head;
 *head = new_node;
 }
 
return 0;
}

REMOVING FIRST ITEM
#include <stdio.h>
int main() {
 int pop(node_t ** head) {
 int retval = -1;
 node_t * next_node = NULL;
 
 if (*head == NULL) {
 return -1;
 }
 
 next_node = (*head)->next;
 retval = (*head)->val;
 free(*head);
 *head = next_node;
 
 return retval;
 }
 
return 0;
}

REMOVING LAST
#include <stdio.h>
int main() {
 int remove_last(node_t * head) {
 int retval = 0;
 /* if there is only one item in the list, remove it */
 if (head->next == NULL) {
 retval = head->val;
 free(head);
 return retval;
 }
 
 /* get to the second to last node in the list */
 node_t * current = head;
 while (current->next->next != NULL) {
 current = current->next;
 }
 
 /* now current points to the second to last item of the list, so let's remove current->next */
 retval = current->next->val;
 free(current->next);
 current->next = NULL;
 return retval;
 
 }
 
return 0;
}

REMOVE SPECIFIC
#include <stdio.h>
int main() {
 int remove_by_index(node_t ** head, int n) {
 int i = 0;
 int retval = -1;
 node_t * current = *head;
 node_t * temp_node = NULL;
 
 if (n == 0) {
 return pop(head);
 }
 
 for (i = 0; i < n-1; i++) {
 if (current->next == NULL) {
 return -1;
 }
 current = current->next;
 }
 
 temp_node = current->next;
 retval = temp_node->val;
 current->next = temp_node->next;
 free(temp_node);
 
 return retval;
 
 }
 
return 0;
}

STACK IN C
#include <stdio.h>
int MAXSIZE = 8; 
int stack[8]; 
int top = -1; 
int isempty() {
 if(top == -1)
 return 1;
 else
 return 0;
}
 
int isfull() {
 if(top == MAXSIZE)
 return 1;
 else
 return 0;
}
int peek() {
 return stack[top];
}
int pop() {
 int data;
 if(!isempty()) {
 data = stack[top];
 top = top - 1; 
 return data;
 } else {
 printf("Could not retrieve data, Stack is empty.\n");
 }
}
int push(int data) {
 if(!isfull()) {
 top = top + 1; 
 stack[top] = data;
 } else {
 printf("Could not insert data, Stack is full.\n");
 }
}
int main() {
 // push items on to the stack 
 push(3);
 push(5);
 push(9);
 push(1);
 push(12);
 push(15);
 printf("Element at top of the stack: %d\n" ,peek());
 printf("Elements: \n");
 // print stack data 
 while(!isempty()) {
 int data = pop();
 printf("%d\n",data);
 }
 printf("Stack full: %s\n" , isfull()?"true":"false");
 printf("Stack empty: %s\n" , isempty()?"true":"false");
 
 return 0;
}


PUSH OPERATION
struct Node
{ float Number ;
Node *Link ;
} ;
class STACK
{ Node *Top ;
public :
STACK( ) {Top = NULL ;}
void PUSH( ) ;
void POP( ) ;
~STACK( ) ;
} ;
void STACK::PUSH( )
{ Node *Temp;
Temp=new Node;
if(Temp= =NULL)
{
cout<<”\nNo memory to create the node…”;
exit(1);
}
cout<<”\nEnter the Number to be inserted: “;
cin>>Temp→ Number;
Temp→ Link=Top;
Top=Temp;
}
